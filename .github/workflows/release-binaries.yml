name: Release Binaries

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release'
        required: true
        type: string

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
          - goos: windows
            goarch: arm64
            name: windows-arm64
            ext: .exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Auto-generate version for main branch pushes
            BUILD_DATE=$(date +%Y%m%d)
            BUILD_TIME=$(date +%H%M)
            SHORT_SHA=${GITHUB_SHA::7}
            echo "version=dev-${BUILD_DATE}.${BUILD_TIME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Create build directory
          mkdir -p dist
          
          # Set binary name
          BINARY_NAME="cycletls-proxy${{ matrix.ext }}"
          
          # Set build time
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Build the binary
          go build -ldflags "-w -s -X main.version=${{ steps.version.outputs.version }} -X main.buildTime=$BUILD_TIME -X main.gitCommit=${GITHUB_SHA::8}" -o dist/${BINARY_NAME} ./cmd/proxy
          
          # Verify binary was created
          ls -la dist/
          file dist/${BINARY_NAME}

      - name: Create archive
        run: |
          cd dist
          BINARY_NAME="cycletls-proxy${{ matrix.ext }}"
          ARCHIVE_NAME="cycletls-proxy-${{ steps.version.outputs.version }}-${{ matrix.name }}"
          
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            # Create zip for Windows
            zip -9 "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
            echo "ARCHIVE_FILE=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            # Create tar.gz for Unix-like systems
            tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
            echo "ARCHIVE_FILE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Generate checksums
        run: |
          cd dist
          sha256sum "${ARCHIVE_FILE}" > "${ARCHIVE_FILE}.sha256"
          cat "${ARCHIVE_FILE}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cycletls-proxy-${{ matrix.name }}
          path: |
            dist/${{ env.ARCHIVE_FILE }}
            dist/${{ env.ARCHIVE_FILE }}.sha256
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Auto-generate version for main branch pushes
            BUILD_DATE=$(date +%Y%m%d)
            BUILD_TIME=$(date +%H%M)
            SHORT_SHA=${GITHUB_SHA::7}
            echo "version=dev-${BUILD_DATE}.${BUILD_TIME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # CycleTLS-Proxy ${VERSION}
          
          ## What's New
          
          This release includes the following improvements and updates:
          
          - Latest CycleTLS integration with enhanced TLS fingerprinting
          - Performance optimizations and bug fixes
          - Multi-platform binary support (Linux, macOS, Windows)
          - Advanced TLS configuration options
          
          ## Installation
          
          ### Binary Installation
          
          Download the appropriate binary for your platform from the assets below:
          
          - **Linux**: \`cycletls-proxy-${VERSION}-linux-amd64.tar.gz\`
          - **macOS**: \`cycletls-proxy-${VERSION}-darwin-amd64.tar.gz\` (Intel) or \`cycletls-proxy-${VERSION}-darwin-arm64.tar.gz\` (Apple Silicon)
          - **Windows**: \`cycletls-proxy-${VERSION}-windows-amd64.zip\`
          
          ## Verification
          
          All release assets include SHA256 checksums for verification:
          
          \`\`\`bash
          # Verify checksum (Linux/macOS)
          sha256sum -c cycletls-proxy-${VERSION}-linux-amd64.tar.gz.sha256
          
          # Verify checksum (Windows PowerShell)
          Get-FileHash cycletls-proxy-${VERSION}-windows-amd64.zip -Algorithm SHA256
          \`\`\`
          
          ## Usage
          
          After extracting the binary, run:
          
          \`\`\`bash
          ./cycletls-proxy
          \`\`\`
          
          The proxy will start on port 8080 by default. See the [documentation](https://github.com/Danny-Dasilva/CycleTLS-Proxy) for configuration options.
          
          ---
          
          **Full Changelog**: https://github.com/Danny-Dasilva/CycleTLS-Proxy/compare/${{ github.event.before }}...${{ steps.version.outputs.version }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.is_release == 'true' && format('Release {0}', steps.version.outputs.version) || format('Development Build {0}', steps.version.outputs.version) }}
          body_path: release_notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ steps.version.outputs.is_release == 'false' || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        if: "!contains(steps.version.outputs.version, 'beta') && !contains(steps.version.outputs.version, 'alpha') && !contains(steps.version.outputs.version, 'rc')"
        run: |
          echo "Latest stable release: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Binary downloads available in release assets" >> $GITHUB_STEP_SUMMARY