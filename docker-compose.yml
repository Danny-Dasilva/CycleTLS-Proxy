version: '3.8'

services:
  # Main CycleTLS-Proxy service
  cycletls-proxy:
    build:
      context: .
      dockerfile: Dockerfile
      # Build arguments for customization
      args:
        - GO_VERSION=1.21
    image: cycletls-proxy:latest
    container_name: cycletls-proxy
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "8080:8080"
      # Alternative port mapping for development
      # - "8080-8090:8080"  # Map to a range if needed
    
    # Environment variables
    environment:
      - PORT=8080
      - LOG_LEVEL=info
      # Add more environment variables as needed
      # - DEBUG=false
      # - MAX_CONNECTIONS=1000
      # - TIMEOUT=30s
    
    # Resource limits (optional but recommended for production)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Volume mounts (uncomment if you need persistent data or config files)
    # volumes:
    #   - ./config:/app/config:ro
    #   - ./logs:/app/logs
    #   - cycletls_data:/app/data
    
    # Networks
    networks:
      - cycletls_network
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User override (runs as non-root by default in Dockerfile)
    # user: "1000:1000"

  # Development service with hot reload (alternative to main service)
  cycletls-proxy-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Uncomment development section in Dockerfile to use this
    image: cycletls-proxy:dev
    container_name: cycletls-proxy-dev
    restart: unless-stopped
    profiles:
      - dev  # Only start when using 'dev' profile
    
    ports:
      - "8080:8080"
    
    environment:
      - PORT=8080
      - LOG_LEVEL=debug
      - GO_ENV=development
    
    # Mount source code for hot reload
    volumes:
      - .:/app
      - /app/bin  # Exclude binary directory
      - go_modules:/go/pkg/mod  # Cache Go modules
    
    networks:
      - cycletls_network
    
    # Override command for development
    command: ["air", "-c", ".air.toml"]

  # Optional: Reverse proxy (nginx) for production deployments
  nginx:
    image: nginx:alpine
    container_name: cycletls-nginx
    restart: unless-stopped
    profiles:
      - production  # Only start when using 'production' profile
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      # - certbot_certs:/etc/letsencrypt:ro
    
    depends_on:
      cycletls-proxy:
        condition: service_healthy
    
    networks:
      - cycletls_network

  # Optional: Monitoring with Prometheus (for production)
  prometheus:
    image: prom/prometheus:latest
    container_name: cycletls-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - cycletls_network

  # Optional: Grafana dashboard (for monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: cycletls-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    
    depends_on:
      - prometheus
    
    networks:
      - cycletls_network

# Named volumes for persistent data
volumes:
  # cycletls_data:
  #   driver: local
  go_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  # certbot_certs:
  #   driver: local

# Custom network for service communication
networks:
  cycletls_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Example usage commands:
# 
# Development:
#   docker-compose --profile dev up -d cycletls-proxy-dev
# 
# Production:
#   docker-compose --profile production up -d cycletls-proxy nginx
# 
# With monitoring:
#   docker-compose --profile production --profile monitoring up -d
# 
# Basic usage:
#   docker-compose up -d cycletls-proxy
# 
# Build and start:
#   docker-compose up --build -d
# 
# View logs:
#   docker-compose logs -f cycletls-proxy
# 
# Stop all services:
#   docker-compose down
# 
# Stop and remove volumes:
#   docker-compose down -v